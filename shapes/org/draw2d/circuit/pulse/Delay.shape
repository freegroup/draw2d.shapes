[
  {
    "type": "shape_designer.figure.PolyRect",
    "id": "1b71bcf4-939c-5650-8a7e-68514e9d2149",
    "x": 3959.41233125,
    "y": 3966.16673,
    "width": 84,
    "height": 69,
    "alpha": 1,
    "angle": 0,
    "userData": {
      "baseClass": "draw2d.SetFigure",
      "code": "/**\n * by 'Draw2D Shape Designer'\n *\n * Custom JS code to tweak the standard behaviour of the generated\n * shape. add your custome code and event handler here.\n *\n *\n */\ntestShape = testShape.extend({\n\n    init: function(attr, setter, getter){\n        var _this = this;\n        \n        this._super(attr, setter, getter);\n\n        this.on(\"change:userData.delay\",function(emitter, event){\n            var value = event.value;\n            _this.delayedValues = []; \n            _this.delayedValues.length = parseInt(parseInt(value)/10);\n            _this.pointer=0;\n            \n        });\n        this.attr({\n            resizeable:false,\n            \"userData.delay\":1500\n        });\n        this.installEditPolicy(new draw2d.policy.figure.AntSelectionFeedbackPolicy());\n    },\n    \n    /**\n     * called every '10 [ms]' from the application. do a little bit calculation\n     * to change the state every 100ms (10Hz)\n     * \n     **/\n    calculate:function()\n    {\n       this.getOutputPort(0).setValue(this.delayedValues[this.pointer]);\n       this.delayedValues[this.pointer] = this.getInputPort(0).getValue();\n       this.pointer = (this.pointer+1)%this.delayedValues.length; \n    },\n    \n    onStart:function()\n    {\n        this.currentTimer=0;\n    },\n    \n    onStop:function()\n    {\n    },\n\n    getParameterSettings: function()\n    {\n        return [\n        {\n            name:\"delay\",\n            label:\"Delay [ms]\",\n            property:{\n                type: \"integer\",\n                min: 10,\n                max: 100,\n                increment:10\n        }\n        \n        }];\n    }\n\n});",
      "name": "Rectangle",
      "markdown": "# Clock Signal\n\nIn electronics and especially synchronous digital circuits, \na clock signal is a particular type of signal that \noscillates between a `high` and a `low` state and is \nutilized like a metronome to coordinate actions \nof digital circuits.\n\nThe hertz (symbol `Hz`) is the unit of frequency in the \nInternational System of Units (SI) and is defined as \none cycle per second. \n\nIt is named for Heinrich Rudolf Hertz, the first person \nto provide conclusive proof of the existence of \nelectromagnetic waves.",
      "type": "Output",
      "direction": 1
    },
    "cssClass": "shape_designer_figure_PolyRect",
    "ports": [],
    "bgColor": "#FFFFFF",
    "color": "#303030",
    "stroke": 1,
    "radius": 0,
    "dasharray": null,
    "vertices": [
      {
        "x": 4043.41233125,
        "y": 4035.16673
      },
      {
        "x": 3959.41233125,
        "y": 4035.16673
      },
      {
        "x": 3959.41233125,
        "y": 3966.16673
      },
      {
        "x": 4043.41233125,
        "y": 3966.16673
      }
    ],
    "blur": 0,
    "filters": [
      {
        "name": "shape_designer.filter.PositionFilter"
      },
      {
        "name": "shape_designer.filter.SizeFilter"
      },
      {
        "name": "shape_designer.filter.StrokeFilter"
      },
      {
        "name": "shape_designer.filter.FillColorFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtLabel",
    "id": "3df4507b-1655-c9ae-1df0-94a0892e62df",
    "x": 3995.67795625,
    "y": 3989.3932925,
    "width": 28.328125,
    "height": 21.203125,
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "Label"
    },
    "cssClass": "shape_designer_figure_ExtLabel",
    "ports": [],
    "bgColor": "none",
    "color": "#1B1B1B",
    "stroke": 0,
    "radius": 0,
    "dasharray": null,
    "text": "delay",
    "outlineStroke": 0,
    "outlineColor": "none",
    "fontSize": 13,
    "fontColor": "#D4D4D4",
    "fontFamily": null,
    "editor": "draw2d.ui.LabelInplaceEditor",
    "filters": [
      {
        "name": "shape_designer.filter.PositionFilter"
      },
      {
        "name": "shape_designer.filter.FontSizeFilter"
      },
      {
        "name": "shape_designer.filter.FontColorFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtPort",
    "id": "f4d5683a-7c42-8771-5df4-e4e9da5b8b46",
    "x": 4038.91233125,
    "y": 3997.12625,
    "width": 10,
    "height": 10,
    "alpha": 1,
    "angle": 0,
    "userData": {
      "baseClass": "draw2d.SetFigure",
      "code": "/**\n * by 'Draw2D Shape Designer'\n *\n * Custom JS code to tweak the standard behaviour of the generated\n * shape. add your custome code and event handler here.\n *\n *\n */\ntestShape = testShape.extend({\n\n    init: function(attr, setter, getter){\n        this._super(attr, setter, getter);\n\n        this.attr({resizeable:false});\n        this.installEditPolicy(new draw2d.policy.figure.AntSelectionFeedbackPolicy());\n\n        this.currentTimer=0;\n    },\n    \n    /**\n     * called every '10 [ms]' from the application. do a little bit calculation\n     * to change the state every 100ms (10Hz)\n     * \n     **/\n    calculate:function()\n    {\n       // 10 ticks every 10ms => 10Hz    \n       this.currentTimer = (this.currentTimer+1)%10; \n       if(this.currentTimer===0){\n           this.value = !this.value;\n           this.getOutputPort(0).setValue(this.value);\n       }\n    },\n    \n    onStart:function()\n    {\n        this.currentTimer=0;\n    },\n    \n    onStop:function()\n    {\n    },\n\n    getParameterSettings: function()\n    {\n        return [\n        {\n            name:\"delay\",\n            label:\"Delay [ms]\",\n            property:{\n                type: \"integer\",\n                min: 10,\n                max: 100,\n                increment:10\n        }\n        \n        }];\n    }\n\n});",
      "name": "Port",
      "markdown": "# Clock Signal\n\nIn electronics and especially synchronous digital circuits, \na clock signal is a particular type of signal that \noscillates between a `high` and a `low` state and is \nutilized like a metronome to coordinate actions \nof digital circuits.\n\nThe hertz (symbol `Hz`) is the unit of frequency in the \nInternational System of Units (SI) and is defined as \none cycle per second. \n\nIt is named for Heinrich Rudolf Hertz, the first person \nto provide conclusive proof of the existence of \nelectromagnetic waves.",
      "type": "Output",
      "direction": 1
    },
    "cssClass": "shape_designer_figure_ExtPort",
    "ports": [],
    "bgColor": "#1C9BAB",
    "color": "#1B1B1B",
    "stroke": 1,
    "dasharray": null,
    "filters": [
      {
        "name": "shape_designer.filter.PositionFilter"
      },
      {
        "name": "shape_designer.filter.FanoutFilter"
      },
      {
        "name": "shape_designer.filter.PortDirectionFilter"
      },
      {
        "name": "shape_designer.filter.PortTypeFilter"
      },
      {
        "name": "shape_designer.filter.FillColorFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtPort",
    "id": "3dce50be-cb62-93ee-6ae9-8a903ea77fae",
    "x": 3953.41233125,
    "y": 3997.12625,
    "width": 10,
    "height": 10,
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "Port",
      "type": "Input",
      "direction": 3,
      "fanout": 20
    },
    "cssClass": "shape_designer_figure_ExtPort",
    "ports": [],
    "bgColor": "#37B1DE",
    "color": "#1B1B1B",
    "stroke": 1,
    "dasharray": null,
    "filters": [
      {
        "name": "shape_designer.filter.PositionFilter"
      },
      {
        "name": "shape_designer.filter.FanoutFilter"
      },
      {
        "name": "shape_designer.filter.PortDirectionFilter"
      },
      {
        "name": "shape_designer.filter.PortTypeFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtLine",
    "id": "d3f4301d-7c4a-ed21-8251-50473ab0c628",
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "Line"
    },
    "cssClass": "shape_designer_figure_ExtLine",
    "stroke": 1,
    "color": "#000000",
    "outlineStroke": 0,
    "outlineColor": "none",
    "policy": "draw2d.policy.line.VertexSelectionFeedbackPolicy",
    "vertex": [
      {
        "x": 3963.4145687499995,
        "y": 3985.9436099999975
      },
      {
        "x": 3970.7217687499992,
        "y": 3985.9436099999975
      },
      {
        "x": 3970.721768749999,
        "y": 3972.1729699999973
      },
      {
        "x": 4000.6880087499994,
        "y": 3972.8283299999975
      },
      {
        "x": 4000.6880087499994,
        "y": 3985.1592299999975
      },
      {
        "x": 4034.4779087499987,
        "y": 3985.486909999997
      }
    ],
    "router": "draw2d.layout.connection.VertexRouter",
    "radius": "",
    "filters": [
      {
        "name": "shape_designer.filter.StrokeFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtLine",
    "id": "67f7e37e-c165-3c63-63e0-b47dc000ed8f",
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "Line"
    },
    "cssClass": "shape_designer_figure_ExtLine",
    "stroke": 1,
    "color": "#000000",
    "outlineStroke": 0,
    "outlineColor": "none",
    "policy": "draw2d.policy.line.VertexSelectionFeedbackPolicy",
    "vertex": [
      {
        "x": 3962.1886487499964,
        "y": 4025.689209999996
      },
      {
        "x": 3995.0548887499976,
        "y": 4025.361529999996
      },
      {
        "x": 3995.0548887499976,
        "y": 4012.573929999996
      },
      {
        "x": 4025.021128749998,
        "y": 4012.246249999996
      },
      {
        "x": 4025.021128749998,
        "y": 4024.577149999996
      },
      {
        "x": 4038.167188749997,
        "y": 4024.9048299999954
      }
    ],
    "router": "draw2d.layout.connection.VertexRouter",
    "radius": "",
    "filters": [
      {
        "name": "shape_designer.filter.StrokeFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtLine",
    "id": "cb143409-9709-4790-4652-c8bad2c0e4ef",
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "Line"
    },
    "cssClass": "shape_designer_figure_ExtLine",
    "stroke": 2,
    "color": "#FF0569",
    "outlineStroke": 0,
    "outlineColor": "none",
    "policy": "draw2d.policy.line.VertexSelectionFeedbackPolicy",
    "vertex": [
      {
        "x": 3970.4985600000014,
        "y": 3996.385280000001
      },
      {
        "x": 3970.8262400000026,
        "y": 4013.0969600000026
      }
    ],
    "router": "draw2d.layout.connection.VertexRouter",
    "radius": "",
    "filters": [
      {
        "name": "shape_designer.filter.StrokeFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtLine",
    "id": "81ff2cc0-a962-2fcd-861e-3d9671384541",
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "Line"
    },
    "cssClass": "shape_designer_figure_ExtLine",
    "stroke": 2,
    "color": "#FF0569",
    "outlineStroke": 0,
    "outlineColor": "none",
    "policy": "draw2d.policy.line.VertexSelectionFeedbackPolicy",
    "vertex": [
      {
        "x": 3994.6649600000023,
        "y": 4004.66768
      },
      {
        "x": 3990.487040000001,
        "y": 4012.040479999998
      }
    ],
    "router": "draw2d.layout.connection.VertexRouter",
    "radius": "",
    "filters": [
      {
        "name": "shape_designer.filter.StrokeFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtLine",
    "id": "2c8a2e58-a4a1-1a9f-3db4-173a42aa8d6f",
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "Line"
    },
    "cssClass": "shape_designer_figure_ExtLine",
    "stroke": 2,
    "color": "#FF0569",
    "outlineStroke": 0,
    "outlineColor": "none",
    "policy": "draw2d.policy.line.VertexSelectionFeedbackPolicy",
    "vertex": [
      {
        "x": 3970.5833600000024,
        "y": 4004.3344000000034
      },
      {
        "x": 3994.1763199999996,
        "y": 4004.662080000001
      }
    ],
    "router": "draw2d.layout.connection.VertexRouter",
    "radius": "",
    "filters": [
      {
        "name": "shape_designer.filter.StrokeFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtLine",
    "id": "68fbd21e-7171-5729-773d-887407bf5c72",
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "Line"
    },
    "cssClass": "shape_designer_figure_ExtLine",
    "stroke": 2,
    "color": "#FF0569",
    "outlineStroke": 0,
    "outlineColor": "none",
    "policy": "draw2d.policy.line.VertexSelectionFeedbackPolicy",
    "vertex": [
      {
        "x": 3988.1057600000036,
        "y": 3997.80608
      },
      {
        "x": 3994.987040000001,
        "y": 4003.540479999998
      }
    ],
    "router": "draw2d.layout.connection.VertexRouter",
    "radius": "",
    "filters": [
      {
        "name": "shape_designer.filter.StrokeFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtLine",
    "id": "f45ae44d-a82d-f2e6-28ae-59dde3f4c067",
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "Line"
    },
    "cssClass": "shape_designer_figure_ExtLine",
    "stroke": 1,
    "color": "#A8A8A8",
    "outlineStroke": 0,
    "outlineColor": "none",
    "policy": "draw2d.policy.line.VertexSelectionFeedbackPolicy",
    "vertex": [
      {
        "x": 3970.328679843882,
        "y": 3986.797817969916
      },
      {
        "x": 3970.066535843883,
        "y": 3994.5146819699157
      }
    ],
    "router": "draw2d.layout.connection.VertexRouter",
    "radius": "",
    "filters": [
      {
        "name": "shape_designer.filter.StrokeFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtLine",
    "id": "b4adf9ad-f0e9-fab0-f5a4-19740aa1fd89",
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "Line"
    },
    "cssClass": "shape_designer_figure_ExtLine",
    "stroke": 1,
    "color": "#C9C9C9",
    "outlineStroke": 0,
    "outlineColor": "none",
    "policy": "draw2d.policy.line.VertexSelectionFeedbackPolicy",
    "vertex": [
      {
        "x": 3995.0521358438823,
        "y": 4011.4042819699152
      },
      {
        "x": 3995.4617358438827,
        "y": 3993.791481969915
      }
    ],
    "router": "draw2d.layout.connection.VertexRouter",
    "radius": "",
    "filters": [
      {
        "name": "shape_designer.filter.StrokeFilter"
      }
    ]
  }
]